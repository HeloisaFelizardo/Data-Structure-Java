/*
IsFull(V)
1. se (tail + 1) % |V| == head
2.    retorna VERDADEIRO
3. senão
4.    retorna FALSO

Enqueue(V, x)
1. se !IsFull(V)
2.    V[tail] ← x
3.    tail ← (tail + 1) % |V|
4. senão
5.    erro overflow

IsEmpty()
1. se head == tail
2.    retorna VERDADEIRO
3. senão
4.    retorna FALSO

Dequeue(V)
1. se !IsEmpty()
2.    x ← V[head]
3.    head ← (head + 1) % |V|
4.    retorna x
5. senão
6.    erro underflow
 */

package entities;

public class CircularQueue {
    private int[] array;
    private int head;
    private int tail;

    public CircularQueue(int size) {
        array = new int[size];
        head = 0;
        tail = 0;
    }

    public boolean isFull() {
        return (tail + 1) % array.length == head;
    }

    public void enqueue(int x) {
        if (!isFull()) {
            array[tail] = x;
            tail = (tail + 1) % array.length;
        } else {
            System.out.println("Overflow Error");
        }
    }

    public boolean isEmpty() {
        return head == tail;
    }

    public int dequeue() {
        if (!isEmpty()) {
            int x = array[head];
            head = (head + 1) % array.length;
            return x;
        } else {
        	System.out.println("Underflow Error");
        }
    }

    public void printQueue() {
        int i = head;
        while (i != tail) {
            System.out.print(array[i] + " ");
            i = (i + 1) % array.length;
        }
        System.out.println();
    }
}
