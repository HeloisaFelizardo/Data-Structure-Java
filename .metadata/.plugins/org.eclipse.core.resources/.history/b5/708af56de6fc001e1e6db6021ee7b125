package entities;

public class CircularQueue {
    private int[] queue;
    private int capacity;
    private int head;
    private int tail;

    public CircularQueue(int capacity) {
        this.capacity = capacity;
        this.queue = new int[capacity];
        this.head = 0;
        this.tail = 0;
    }

    public boolean isEmpty() {
        return head == tail;
    }

    public boolean isFull() {
        return (tail + 1) % capacity == head;
    }

    public void enqueue(int x) {
        if (!isFull()) {
            queue[tail] = x;
            tail = (tail + 1) % capacity;
        } else {
            System.out.println("Erro: overflow");
        }
    }

    public int dequeue() {
        if (!isEmpty()) {
            int x = queue[head];
            head = (head + 1) % capacity;
            return x;
        } else {
            System.out.println("Erro: underflow");
            return -1; // Retorna um valor padrão, mas poderia ser melhorado com exceções em Java
        }
    }