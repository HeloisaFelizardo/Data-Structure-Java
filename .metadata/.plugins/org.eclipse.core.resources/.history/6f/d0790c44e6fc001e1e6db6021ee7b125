package entities;

class CircularQueue {
    constructor(capacity) {
        this.capacity = capacity;
        this.queue = new Array(capacity);
        this.head = 0;
        this.tail = 0;
    }

    isEmpty() {
        return this.head === this.tail;
    }

    isFull() {
        return (this.tail + 1) % this.capacity === this.head;
    }

    enqueue(x) {
        if (!this.isFull()) {
            this.queue[this.tail] = x;
            this.tail = (this.tail + 1) % this.capacity;
        } else {
            console.log("Erro: overflow");
        }
    }

    dequeue() {
        if (!this.isEmpty()) {
            const x = this.queue[this.head];
            this.head = (this.head + 1) % this.capacity;
            return x;
        } else {
            console.log("Erro: underflow");
            return -1; // Retorna um valor padrão, mas poderia ser melhorado com exceções em JavaScript
        }
    }
}